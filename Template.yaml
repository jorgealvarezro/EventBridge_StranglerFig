AWSTemplateFormatVersion: 2010-09-09
Description: Monolith stack for the Application Modernization Workshop/ Immersion Day
Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Use an AMI of your choosing, we recommend to use the latest available
  MonolithRepository:
    Type: String
    Default: https://github.com/jorgealvarezro/EventBridge_StranglerFig.git
    Description: The repo to clone for the Monolith Legacy Application
  MonolithBranch:
    Type: String
    Default: main
    Description: The repo branch to use for the Monolith Legacy Application
  MyIPAddress:
    Type: String
    Description: My public IP Address
  StageName:
    Type: String
    Default: prod
    Description: Name of Stage for API Gateway

Resources:
  MonoToMicroVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MonoToMicroVPC
  MonoToMicroIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MonoToMicroIGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MonoToMicroVPC
      InternetGatewayId: !Ref MonoToMicroIGW
  MonoToMicroSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MonoToMicroVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MonoToMicroSubnet1
  MonoToMicroSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MonoToMicroVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MonoToMicroSubnet2
  MonoToMicroSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MonoToMicroVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MonoToMicroSubnet3

  MonoToMicroSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MonoToMicroVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: AWS::Region
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MonoToMicroSubnet4

  MonoToMicroPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonoToMicroVPC
      Tags:
        - Key: Name
          Value: MonoToMicroPublicRoute
  MonoToMicroPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MonoToMicroPublicRouteTable
      GatewayId: !Ref MonoToMicroIGW
      DestinationCidrBlock: 0.0.0.0/0
  MonoToMicroPublicSubnetRouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MonoToMicroPublicRouteTable
      SubnetId: !Ref MonoToMicroSubnet1

  MonoToMicroPublicSubnetRouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MonoToMicroPublicRouteTable
      SubnetId: !Ref MonoToMicroSubnet2

  MonoToMicroGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  MonoToMicroGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  MonoToMicroNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MonoToMicroGatewayEIP1.AllocationId
      SubnetId: !Ref MonoToMicroSubnet1

  MonoToMicroNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MonoToMicroGatewayEIP2.AllocationId
      SubnetId: !Ref MonoToMicroSubnet2

  MonoToMicroPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonoToMicroVPC
      Tags:
        - Key: Name
          Value: MonoToMicroPrivateRoute1

  MonoToMicroPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MonoToMicroPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MonoToMicroNatGateway1

  MonoToMicroSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MonoToMicroPrivateRouteTable1
      SubnetId: !Ref MonoToMicroSubnet3

  MonoToMicroPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonoToMicroVPC
      Tags:
        - Key: Name
          Value: MonoToMicroPrivateRoute2

  MonoToMicroPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MonoToMicroPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MonoToMicroNatGateway2

  MonoToMicroSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MonoToMicroPrivateRouteTable2
      SubnetId: !Ref MonoToMicroSubnet4


  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref MonoToMicroVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: MonoToMicroDBSG

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open App access
      VpcId: !Ref MonoToMicroVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIPAddress
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MyIPAddress
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIPAddress
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MyIPAddress
      Tags:
        - Key: Name
          Value: MonoToMicroEC2SG
  EC2SecurityGroupDBRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref DBSecurityGroup
  InstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole
  
  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-S3Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !GetAtt AssetBucket.Arn
              - !Join
                - ''
                - - !GetAtt AssetBucket.Arn
                  - /*
      Roles:
        - !Ref EC2InstanceRole

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-MonotoMicroRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  DBInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update
            - install
            - configure
        update:
          commands:
            update:
              command: sudo yum update -y
        install:
          commands:
            0-install-db:
              command: |
                rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
                yum localinstall -y https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
                yum install -y mysql-community-server
                yum install -y git
                systemctl enable mysqld
                systemctl start mysqld
                mysql -u root "-p$(grep -oP '(?<=root@localhost\: )\S+' /var/log/mysqld.log)" -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Jasdfklj*%lkj98'" --connect-expired-password
                mysql -u root "-pJasdfklj*%lkj98" -e "SET GLOBAL validate_password.policy=LOW"
                mysql -u root "-pJasdfklj*%lkj98" -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'MonoToMicroPassword'"
                mysql -u root "-pMonoToMicroPassword" -e "CREATE USER 'MonoToMicroUser'@'%' IDENTIFIED BY 'MonoToMicroPassword'"
                mysql -u root "-pMonoToMicroPassword" -e "GRANT ALL PRIVILEGES ON *.* TO 'MonoToMicroUser'@'%'"
                mysql -u root "-pMonoToMicroPassword" -e "FLUSH PRIVILEGES"
        configure:
          commands:
            0-clone-repo:
              command:
                !Sub |
                git clone \
                --single-branch \
                --branch ${MonolithBranch} \
                ${MonolithRepository} \
                /home/ec2-user/MonoToMicro
            1-create-tables:
              command: >-
                sudo mysql -u MonoToMicroUser -h localhost -P 3306 -pMonoToMicroPassword < /home/ec2-user/MonoToMicro/MonoToMicroLegacy/database/create_tables.sql
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref MonoToMicroSubnet1
      SecurityGroupIds:
        - !Ref DBSecurityGroup
      
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo yum install -y aws-cfn-bootstrap 
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DBInstance --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DBInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: MonoToMicroDB


  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update
            - install
            - configure
            - create-service-files
            - start-service
        update:
          commands:
            update:
              command: sudo yum update -y
        install:
          packages:
            yum:
              amazon-cloudwatch-agent: []
              git: []
              java-11-amazon-corretto-headless: []
              mariadb: []
              unzip: []
        configure:
          commands:
            0-clone-repo:
              command:
                !Sub |
                git clone \
                --single-branch \
                --branch ${MonolithBranch} \
                ${MonolithRepository} \
                /home/ec2-user/MonoToMicro
            1-exportDbEndpoint:
              command: !Sub
                - export MONO_TO_MICRO_DB_ENDPOINT=${DB}
                - { DB: !GetAtt 'DBInstance.PrivateDnsName' }
            2-gradle-install-build:
              command: |
                cd /home/ec2-user/MonoToMicro/MonoToMicroLegacy
                ./gradlew clean build
                cd /home/ec2-user/MonoToMicro/MonoToMicroLambda
                ./gradlew clean shadowJar
            3-install-nginx:
              command: !Join
                - ''
                - - |
                    amazon-linux-extras enable epel
                  - >
                    yum install -y epel-release
                  - >
                    yum install -y nginx
                  - >
                    systemctl enable nginx
                  - >
                    chown -R nginx:nginx /home/ec2-user/MonoToMicro/MonoToMicroUI
                  - >
                    chmod -R 755 /home
                  - >
                    sed -i'' -e 's|/usr/share/nginx/html|/home/ec2-user/MonoToMicro/MonoToMicroUI|g' /etc/nginx/nginx.conf
                  - >
                    echo 'location /api/ { proxy_pass http://127.0.0.1:8080/; }' > /etc/nginx/default.d/001-api.conf
                  - >
                    systemctl start nginx
            4-populate-buckets:
              command: !Sub |
                AWS_DEFAULT_REGION=${AWS::Region}
                aws s3 cp /home/ec2-user/MonoToMicro/MonoToMicroLambda/build/libs s3://${AssetBucket}/ --recursive
                aws s3 cp /home/ec2-user/MonoToMicro/MonoToMicroLegacy/build/libs s3://${AssetBucket}/ --recursive
        create-service-files:
          files:
            /etc/systemd/system/mono2micro.service:
              encoding: plain
              content: |
                [Unit]
                Description=Restart Mono2Micro
                Wants=network.target
                After=syslog.target network-online.target amazon-cloudwatch-agent.target
                
                [Service]
                Type=simple
                ExecStart=/home/ec2-user/MonoToMicro/m2minit.sh
                Restart=on-failure
                RestartSec=60
                KillMode=process
                
                [Install]
                WantedBy=multi-user.target
              mode: '000644'
              group: root
              user: root
            /home/ec2-user/MonoToMicro/m2minit.sh:
              encoding: plain
              content: |
                #!/bin/bash
                source /home/ec2-user/MonoToMicro/m2mcfg.sh
                source /home/ec2-user/MonoToMicro/m2mrun.sh
              mode: '000555'
              group: ec2-user
              user: ec2-user
            /home/ec2-user/MonoToMicro/m2mcfg.sh:
              encoding: plain
              content: !Sub
                - |
                  #!/bin/bash
                  export Database=${DB}
                  export MONO_TO_MICRO_DB_ENDPOINT=${DB}
                  export AWS_DEFAULT_REGION=${AWS::Region}

                - { DB: !GetAtt 'DBInstance.PrivateDnsName' }
              mode: '000555'
              group: ec2-user
              user: ec2-user
            /home/ec2-user/MonoToMicro/m2mrun.sh:
              encoding: plain
              content: |
                #!/bin/bash
                curl https://s3.us-east-2.amazonaws.com/aws-xray-assets.us-east-2/xray-daemon/aws-xray-daemon-3.x.rpm -o /home/ec2-user/xray.rpm
                yum install -y /home/ec2-user/xray.rpm

                cd /home/ec2-user/
                wget https://github.com/aws/aws-xray-java-agent/releases/latest/download/xray-agent.zip
                mkdir -p /home/ec2-user/MonoToMicro/xrayagent/
                unzip /home/ec2-user/xray-agent.zip -d /home/ec2-user/MonoToMicro/xrayagent/
                export AWS_XRAY_TRACING_NAME="My LegacyApp"
                java -javaagent:/home/ec2-user/MonoToMicro/xrayagent/disco/disco-java-agent.jar=pluginPath=/home/ec2-user/MonoToMicro/xrayagent/disco/disco-plugins -jar /home/ec2-user/MonoToMicro/MonoToMicroLegacy/build/libs/MonoToMicroLegacy-0.0.1-SNAPSHOT.jar &> /home/ec2-user/MonoToMicro/MonoToMicroLegacy/build/libs/app.log &
              mode: '000555'
              group: ec2-user
              user: ec2-user
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {"logs": {"logs_collected": {"files": {"collect_list": [{"file_path": "/home/ec2-user/MonoToMicro/MonoToMicroLegacy/build/libs/app.log","log_group_name": "${InstanceLogGroup}","log_stream_name":"${InstanceLogGroup}-app", "timezone": "Local"}]}}}}
              mode: '000444'
              group: ec2-user
              user: ec2-user
        start-service:
          commands:
            0-start-service:
              command: |
                sudo systemctl daemon-reload
                sudo systemctl enable mono2micro
                sudo systemctl start mono2micro
                sudo amazon-cloudwatch-agent-ctl -a fetch-config -s -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref MonoToMicroSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo yum install -y aws-cfn-bootstrap 
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

          # Send signal to WaitCondition
          SIGNAL_URL="${MyWaitHandle}"
          curl -X PUT -H 'Content-Type:' --data-binary '{"Status": "SUCCESS","Reason": "Configuration Complete","UniqueId": "MyWaitCondition","Data": "Application has completed configuration."}' "$SIGNAL_URL"
      Tags:
        - Key: Name
          Value: MonoToMicroEC2
  
  MyWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  
  MyWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn : "EC2Instance"
    Properties:
      Handle: !Ref MyWaitHandle
      Timeout: '1860'
      Count: 1

  PublicDnsNameSSMParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: UniShopPublicDnsName
      Value: !Sub
        - 'http://${Dns}'
        - { Dns: !GetAtt EC2Instance.PublicDnsName}
      Type: String
      Description: Monolith Public DNS Param

  VpcIdSSMParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: UniShopVpcId
      Value: !Ref MonoToMicroVPC
      Type: String
      Description: Monolith VPC ID

  AssetBucket:
    Type: AWS::S3::Bucket

  CreateUserLambda:
      Type: AWS::Lambda::Function
      DependsOn: MyWaitCondition
      Properties:
        FunctionName: CreateUserLambda
        Description: Lambda that adds a unicorn into a basket.
        Runtime: java11
        MemorySize: 1024
        Timeout: 30
        Layers:
          - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"
        Code:
          S3Bucket: !Ref AssetBucket
          S3Key: MonoToMicroLambda-0.0.1.jar
        Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/MonoToMicroLambdaRole'
        Handler: com.monoToMicro.Lambda.CreateHandler::handleRequest
        TracingConfig:
          Mode: Active
        Tags:
          - Key: AppName
            Value: UnicornShop

  LoginUserLambda:
    Type: AWS::Lambda::Function
    DependsOn: MyWaitCondition
    Properties:
      FunctionName: LoginUserLambda
      Description: Lambda that removes a unicorn from a basket.
      Runtime: java11
      MemorySize: 1024
      Timeout: 30
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"
      Code:
        S3Bucket: !Ref AssetBucket
        S3Key: MonoToMicroLambda-0.0.1.jar
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/MonoToMicroLambdaRole'
      Handler: com.monoToMicro.Lambda.LoginHandler::handleRequest
      TracingConfig:
        Mode: Active
      Tags:
        - Key: AppName
          Value: UnicornShop

  SearchUserLambda:
    Type: AWS::Lambda::Function
    DependsOn: MyWaitCondition
    Properties:
      FunctionName: SearchUserLambda
      Description: Lambda that lists the unicorns in a basket.
      Runtime: java11
      MemorySize: 1024
      Timeout: 30
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"
      Code:
        S3Bucket: !Ref AssetBucket
        S3Key: MonoToMicroLambda-0.0.1.jar
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/MonoToMicroLambdaRole'
      Handler: com.monoToMicro.Lambda.SearchHandler::handleRequest
      TracingConfig:
        Mode: Active
      Tags:
        - Key: AppName
          Value: UnicornShop

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: unishop-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      Tags:
        - Key: Name
          Value: MonoToMicroDDBTable
        - Key: AppName
          Value: UnicornShop

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MonoToMicroLambdaRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DynamoDBTable.Arn
  
  MyNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: MyWaitCondition
    Properties:
      Name: my-network-load-balancer
      Scheme: internal
      Type: network
      Subnets: 
        - !Ref MonoToMicroSubnet1
      SecurityGroups:
        - !Ref NLBSecurityGroup
      Tags:
        - Key: Name
          Value: MyNLB

  NLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NLB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MonoToMicroVPC
      Tags:
        - Key: Name
          Value: NLBSecurityGroup

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup
      LoadBalancerArn: !Ref MyNetworkLoadBalancer
      Port: 80
      Protocol: TCP
  
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref MonoToMicroVPC
      Targets:
        - Id: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: MyNLBTargetGroup
  
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${RestAPIGateway}
      RetentionInDays: 7

  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action: "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  LambdaSMAndExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: AllowSM
        PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                - secretsmanager:GetSecretValue
                Resource: !Ref PrivateAuthenticationToken
  
  PrivateAuthenticationToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: API Key
      Name: AuthorizationToken
      GenerateSecretString:
        PasswordLength: 30
        ExcludePunctuation: True
        GenerateStringKey: apiKey
        SecretStringTemplate: !Sub "{}"

  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: current
      CodeUri: LambdaAuthorizer/
      Handler: app.handler
      Role: !GetAtt LambdaSMAndExecutionRole.Arn
      Runtime: nodejs16.x
      FunctionName: LambdaAuthorizer

  MyVPCLink:
    Type: AWS::ApiGateway::VpcLink
    DependsOn: MyNetworkLoadBalancer
    Properties:
      Name: my-vpc-link
      Description: VPC Link to connect API Gateway to my internal NLB
      TargetArns: 
        - !Ref MyNetworkLoadBalancer 
  
  RestAPIGateway:
      Type: "AWS::Serverless::Api"
      Properties:
        Auth:
          DefaultAuthorizer: MyLambdaRequestAuthorizer
          Authorizers:
            MyLambdaRequestAuthorizer:
              FunctionPayloadType: REQUEST
              FunctionArn: !GetAtt LambdaAuthorizer.Arn
              Identity:
                Headers:
                  - AuthorizationToken
        EndpointConfiguration:
          Type: REGIONAL
        StageName: !Ref StageName
        AccessLogSetting:
          DestinationArn: !Sub ${ApiAccessLogGroup.Arn}
          Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'apiId':'$context.apiId', 'DomainName':'$context.domainName','requestTime':'$context.requestTime','httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength','error':'$context.error.message','stage':'$context.stage'}"
        MethodSettings:
          - MetricsEnabled: True
            ResourcePath: "/*"
            HttpMethod: "*"

        DefinitionBody:
          swagger: 2.0
          x-amazon-apigateway-request-validators:
            basic:
              validateRequestBody: true
              validateRequestParameters: true
          info:
            title: !Sub API-${FunctionName}-${StageName}
          schemes:
          - "https"
          paths:
            /proxysolution:
              get:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                  uri: !Sub "http://${MyInternalNetworkLoadBalancer.DNSName}"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "GET"
                  type: "http_proxy"
                  connectionType: "VPC_LINK"
                  connectionId: 
                    Fn::Ref: MyVPCLink
            /proxysolution/api/user:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                x-amazon-apigateway-integration:
                  uri: 
                    Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserLambda.Arn}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
            /proxysolution/api/user/login:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                x-amazon-apigateway-integration:
                  uri: 
                    Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUserLambda.Arn}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
            /proxysolution/{proxy+}:
              x-amazon-apigateway-any-method:
                produces:
                - "application/json"
                parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
                responses: {}
              x-amazon-apigateway-integration:
                uri: "http://${MyInternalNetworkLoadBalancer.DNSName}/{proxy}"
                httpMethod: "ANY"
                type: "http_proxy"
                passthroughBehavior: "when_no_match"
                connectionType: "VPC_LINK"
                connectionId: 
                  Fn::Ref: MyVPCLink
                requestParameters:
                  integration.request.path.proxy: "method.request.path.proxy"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"      
Outputs:
  WebsiteURL:
    Value: !GetAtt
      - PublicDnsNameSSMParam
      - Value
    Description: Unicorn Shop WebSite URL
  VpcId:
    Value: !GetAtt
      - VpcIdSSMParam
      - Value
    Description: VPC where the monolith is running
  APIUrlOutput:
    Value:
      !Join [
        "/",
        [
          !Sub "https://${RestAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
        ],
      ]